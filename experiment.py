from scapy.all import sniff, Packet
import math
import struct
import json

TOKENS = []

def splitToNSize(value:str,n):
    string = value
    return [string[i : i + n] for i in range(0, len(string), n)]

def removeZero(tok: str):
    if tok is None:
        return ""
    while tok.endswith("00"):
        tok = tok[:-2]
    return tok


def toInt(hex):
    strippedhex = removeZero(hex)
    parsedhex = "".join(reversed(splitToNSize(strippedhex,2)))
    if parsedhex == "":
        return 0
    output = int(parsedhex, 16)
    return output

def toFloat(hex):
    strippedhex = removeZero(hex)
    parsedhex = "".join(reversed(splitToNSize(strippedhex,2)))
    if parsedhex == "":
        return 0
    output = struct.unpack('!f', bytes.fromhex(parsedhex))[0]
    return output

currenttok = ""
def poptoken():
    global currenttok
    try:
        tok = TOKENS.pop(0)
        currenttok = tok
        if len(tok) == 8:
            return tok
        return None
    except Exception:
        return None

DATATYPES = ["01000000","02000000","03000000","04000000","05000000","1b000000","1c000000","1f000000"]
# DATATYPES = ["1b000000","1c000000","1f000000"]

def getTokens(rawdata: str):
    index = 0
    if rawdata.startswith("000200000000") or rawdata.startswith("000300000000"):
        index = 36
    elif rawdata.startswith("0002000000") or rawdata.startswith("0003000000"):
        index = 28
    else:
        index = 1_000_000
        for datatype in DATATYPES:
            x = rawdata.find(datatype)
            if x > -1 and x < index:
                index = x
    string = rawdata[index:]
    n = 8  # every n characters
    tkns = [string[i : i + n] for i in range(0, len(string), n)]
    return tkns

def parsegodot(rawdata):
    global TOKENS
    TOKENS = getTokens(rawdata=rawdata)
    values = []
    while len(TOKENS) != 0:
        values.append(keywords(poptoken()))
    return values

def getyes():
    charlength1 = toInt(poptoken())
    toklen = math.ceil(charlength1 / 4)
    realtok = "".join([poptoken() for _ in range(toklen)])
    return realtok

def getLenofValue():
    charlength1 = toInt(poptoken())
    toklen = math.ceil(charlength1 / 4)
    return toklen

def getDynamicSizeTok(toklen: int):
    realtok = "".join([poptoken() for _ in range(toklen)])
    return realtok


def keywords(tok):
    if tok is None:
        return None  
    elif tok == "00000000":
        return None  
    elif tok == "01000000":  # bool
        return bool(toInt(poptoken()))
    elif tok == "02000000":  # integer
        return toInt(poptoken())
    elif tok == "03000000":  # float
        return toFloat(poptoken())
    elif tok == "04000000":  # string
        charlength = toInt(poptoken())
        toklen = math.ceil(charlength / 4)
        realtok = "".join([poptoken() for _ in range(toklen)])
        stringoutput = bytes.fromhex(removeZero(realtok))
        output = stringoutput.decode('utf-8')
        return output
    elif tok == "05000000":  # vector2
        xlen = getLenofValue()
        ylen = getLenofValue()
        x = toInt(getDynamicSizeTok(xlen))
        y = toInt(getDynamicSizeTok(ylen))
        return (x,y)
    elif tok == "1b000000": # map/dictionary
        temp = {}
        numelements = toInt(poptoken())
        for x in range(numelements):
            key = keywords(poptoken())
            value = keywords(poptoken())
            temp[key] = value
        return temp
    elif tok == "1c000000": # array
        temp = []
        numelements = toInt(poptoken())
        for x in range(numelements):
            temp.append(keywords(poptoken()))
        return temp
    elif tok == "1f000000":
        temp = []
        numelements = toInt(poptoken())
        for x in range(numelements):
            temp.append(keywords(poptoken()))
        return temp
    return 0

wholepacketdata = ""
previousmiscrit = []
## Define our Custom Action function
def custom_action(packet: Packet):
    global wholepacketdata, previousmiscrit
    pkt = packet[0][1]
    if (pkt.src == "34.105.0.189" or pkt.dst == "34.105.0.189") and pkt.len > 40:
        if pkt.len < 44:
            return
        try:
            line = pkt.load.hex()
            n = 2
            groupped = [line[i : i + n].capitalize() for i in range(0, len(line), n)]
            joinned = "".join(groupped)
            joinned = joinned[28:]
            if pkt.len >= 1420:
                wholepacketdata += "".join(getTokens(joinned))
                return False
            
            wholepacketdata += "".join(getTokens(joinned))
            
            parsedobject = parsegodot(wholepacketdata)
            if isinstance(parsedobject,(list,dict)):
                if parsedobject == []:
                    return False
                try:
                    wildstar = parsedobject[1][0]["Star"]
                    wild = parsedobject[1][0]
                    if wild != previousmiscrit:
                        previousmiscrit = wild
                    else:
                        return
                    wildstar = wild["Star"]
                    wildstardict = {
                        "hp": wildstar[2],
                        "spd": wildstar[3],
                        "ea": wildstar[0],
                        "pa": wildstar[1],
                        "ed": wildstar[5],
                        "pd": wildstar[4],
                    }
                    print(wildstardict)
                    return True
                except Exception as e:
                    print(e)
                print(json.dumps(parsedobject,indent=2))
            elif parsedobject is None:
                if len(wholepacketdata) != len("9000ed8c8600023a000607012760464e"):
                    print(wholepacketdata)
            else:
                print(parsedobject)
            
            wholepacketdata = ""
            # print(groupped)
        except Exception as error:
            # print(pkt.load.hex())
            # print(pkt.show())
            # print(currenttok)
            print("An error occurred:", type(error).__name__, "â€“", error)
    
    return False


## Setup sniff, filtering for IP traffic
iscapi = sniff(filter="udp", stop_filter=custom_action)
# print(iscapi[-1].show())
print(iscapi)
print("hello world")
# HEX = "1c000000020000001b0000000c000000040000000300000055494400020000002cf1010004000000040000004e616d65040000000000000004000000050000004c6576656c000000020000001e000000040000000300000045787000020000000000000004000000050000004f776e6572000000040000000700000070306c62616e670004000000020000004964000002000000a901000004000000030000004348500002000000940000000400000004000000537461721c00000006000000020000000200000002000000030000000200000002000000020000000300000002000000020000000200000003000000040000000a000000426f6e7573537461747300001c0000000600000002000000120000000200000010000000020000000c000000020000000c000000020000000c00000002000000110000000400000009000000456e6368616e7465640000001c0000000200000004000000030000003634350004000000030000003233350004000000090000004162696c69746965730000001b0000000c000000040000000100000030000000040000000300000032343100040000000100000031000000040000000300000031343400040000000100000034000000040000000300000031373600040000000100000037000000040000000200000036310000040000000200000031300000040000000300000031353500040000000200000031330000040000000200000031360000040000000200000031360000040000000300000032333500040000000200000031390000040000000200000034380000040000000200000032320000040000000300000036343400040000000200000032350000040000000200000032370000040000000200000032380000040000000200000039340000040000000200000033300000040000000300000036343500040000000500000053746174730000001b00000006000000040000000200000065610000020000005d000000040000000200000070610000020000004e0000000400000002000000687000000200000094000000040000000300000073706400020000004a0000000400000002000000706400000200000043000000040000000200000065640000020000006d0000001b0000000c00000004000000030000005549440002000000d532020004000000040000004e616d65040000000000000004000000050000004c6576656c000000020000000100000004000000030000004578700002000000af00000004000000050000004f776e6572000000040000000700000070306c62616e6700040000000200000049640000020000001f000000040000000300000043485000020000000e0000000400000004000000537461721c00000006000000020000000300000002000000030000000200000002000000020000000300000002000000030000000200000003000000040000000a000000426f6e7573537461747300001c000000060000000200000000000000020000000000000002000000000000000200000000000000020000000000000002000000000000000400000009000000456e6368616e7465640000001c0000000000000004000000090000004162696c69746965730000001b00000002000000040000000100000030000000040000000300000032343700040000000100000031000000040000000200000038380000040000000500000053746174730000001b0000000600000004000000020000006561000002000000080000000400000002000000706100000200000007000000040000000200000068700000020000000e00000004000000030000007370640002000000090000000400000002000000706400000200000004000000020000006564000002000000090000001c000000010000001b0000000a00000004000000020000004964000004000000030000003337380004000000050000004c6576656c0000000200000014000000040000000300000043485000020000006c0000000400000004000000537461721c00000006000000020000000100000002000000030000000200000003000000020000000300000002000000030000000200000003000000040000000a000000426f6e7573537461747300001c000000060000000200000000000000020000000000000002000000000000000200000000000000020000000000000002000000000000000400000009000000456e6368616e7465640000001c000000000000000400000004000000486172640200000003000000040000000400000057696c64040000000000000004000000090000004162696c69746965730000001b00000008000000040000000100000030000000040000000200000036310000040000000100000031000000040000000300000032343700040000000100000034000000040000000300000031373700040000000100000037000000040000000200000037370000040000000200000031300000040000000300000036373100040000000200000031330000040000000300000032313600040000000200000031360000040000000300000032343900040000000200000031390000040000000300000031383500040000000500000053746174730000001b00000006000000040000000200000065610000020000001a0000000400000002000000706100000200000038000000040000000200000068700000020000006c0000000400000003000000737064000200000038000000040000000200000070640000020000002400000004000000020000006564000002000000240000001b000000030000000400000007000000506c6179657273001b00000002000000040000000700000070306c62616e67001b0000000100000004000000050000004c6576656c00000002000000b6000000040000000400000057696c641b00000000000000040000000a000000426174746c655479706500000400000005000000537061776e00000004000000080000004d657461646174611b00000002000000040000000a000000436c69656e745369646500001b00000001000000040000000a0000004261636b67726f756e640000020000000600000004000000080000004c6f636174696f6e1c00000002000000040000000b0000004d6f756e742047656d6d61000200000001000000"
# HEX = "1c000000020000001b0000000c000000040000000300000055494400020000002cf1010004000000040000004e616d65040000000000000004000000050000004c6576656c000000020000001e000000040000000300000045787000020000000000000004000000050000004f776e6572000000040000000700000070306c62616e670004000000020000004964000002000000a901000004000000030000004348500002000000940000000400000004000000537461721c00000006000000020000000200000002000000030000000200000002000000020000000300000002000000020000000200000003000000040000000a000000426f6e7573537461747300001c0000000600000002000000120000000200000010000000020000000c000000020000000c000000020000000c00000002000000110000000400000009000000456e6368616e7465640000001c0000000200000004000000030000003634350004000000030000003233350004000000090000004162696c69746965730000001b0000000c000000040000000100000030000000040000000300000032343100040000000100000031000000040000000300000031343400040000000100000034000000040000000300000031373600040000000100000037000000040000000200000036310000040000000200000031300000040000000300000031353500040000000200000031330000040000000200000031360000040000000200000031360000040000000300000032333500040000000200000031390000040000000200000034380000040000000200000032320000040000000300000036343400040000000200000032350000040000000200000032370000040000000200000032380000040000000200000039340000040000000200000033300000040000000300000036343500040000000500000053746174730000001b00000006000000040000000200000065610000020000005d000000040000000200000070610000020000004e0000000400000002000000687000000200000094000000040000000300000073706400020000004a0000000400000002000000706400000200000043000000"
# HEX += "040000000200000065640000020000006d0000001b0000000c00000004000000030000005549440002000000d532020004000000040000004e616d65040000000000000004000000050000004c6576656c000000020000000100000004000000030000004578700002000000af00000004000000050000004f776e6572000000040000000700000070306c62616e6700040000000200000049640000020000001f000000040000000300000043485000020000000e0000000400000004000000537461721c00000006000000020000000300000002000000030000000200000002000000020000000300000002000000030000000200000003000000040000000a000000426f6e7573537461747300001c000000060000000200000000000000020000000000000002000000000000000200000000000000020000000000000002000000000000000400000009000000456e6368616e7465640000001c0000000000000004000000090000004162696c69746965730000001b00000002000000040000000100000030000000040000000300000032343700040000000100000031000000040000000200000038380000040000000500000053746174730000001b0000000600000004000000020000006561000002000000080000000400000002000000706100000200000007000000040000000200000068700000020000000e00000004000000030000007370640002000000090000000400000002000000706400000200000004000000020000006564000002000000090000001c000000010000001b0000000a00000004000000020000004964000004000000030000003337380004000000050000004c6576656c0000000200000014000000040000000300000043485000020000006c0000000400000004000000537461721c00000006000000020000000100000002000000030000000200000003000000020000000300000002000000030000000200000003000000040000000a000000426f6e7573537461747300001c000000060000000200000000000000020000000000000002000000000000000200000000000000020000000000000002000000000000000400000009000000456e6368616e7465640000001c000000000000000400000004000000486172640200000003000000040000000400000057696c64040000000000000004000000090000004162696c69746965730000001b00000008000000040000000100000030000000040000000200000036310000040000000100000031000000040000000300000032343700040000000100000034000000040000000300000031373700040000000100000037000000040000000200000037370000040000000200000031300000040000000300000036373100040000000200000031330000040000000300000032313600040000000200000031360000040000000300000032343900040000000200000031390000040000000300000031383500040000000500000053746174730000001b00000006000000040000000200000065610000020000001a0000000400000002000000706100000200000038000000040000000200000068700000020000006c0000000400000003000000737064000200000038000000040000000200000070640000020000002400000004000000020000006564000002000000240000001b000000030000000400000007000000506c6179657273001b00000002000000040000000700000070306c62616e67001b0000000100000004000000050000004c6576656c00000002000000b6000000040000000400000057696c641b00000000000000040000000a000000426174746c655479706500000400000005000000537061776e00000004000000080000004d657461646174611b00000002000000040000000a000000436c69656e745369646500001b00000001000000040000000a0000004261636b67726f756e640000020000000600000004000000080000004c6f636174696f6e1c00000002000000040000000b0000004d6f756e742047656d6d61000200000001000000"

# HEX = "1c000000020000001b0000000c000000040000000300000055494400020000002cf1010004000000040000004e616d65040000000000000004000000050000004c6576656c000000020000001e000000040000000300000045787000020000000000000004000000050000004f776e6572000000040000000700000070306c62616e670004000000020000004964000002000000a901000004000000030000004348500002000000940000000400000004000000537461721c00000006000000020000000200000002000000030000000200000002000000020000000300000002000000020000000200000003000000040000000a000000426f6e7573537461747300001c0000000600000002000000120000000200000010000000020000000c000000020000000c000000020000000c00000002000000110000000400000009000000456e6368616e7465640000001c0000000200000004000000030000003634350004000000030000003233350004000000090000004162696c69746965730000001b0000000c000000040000000100000030000000040000000300000032343100040000000100000031000000040000000300000031343400040000000100000034000000040000000300000031373600040000000100000037000000040000000200000036310000040000000200000031300000040000000300000031353500040000000200000031330000040000000200000031360000040000000200000031360000040000000300000032333500040000000200000031390000040000000200000034380000040000000200000032320000040000000300000036343400040000000200000032350000040000000200000032370000040000000200000032380000040000000200000039340000040000000200000033300000040000000300000036343500040000000500000053746174730000001b00000006000000040000000200000065610000020000005d000000040000000200000070610000020000004e0000000400000002000000687000000200000094000000040000000300000073706400020000004a0000000400000002000000706400000200000043000000040000000200000065640000020000006d0000001b0000000c00000004000000030000005549440002000000d532020004000000040000004e616d65040000000000000004000000050000004c6576656c000000020000000100000004000000030000004578700002000000a901000004000000050000004f776e6572000000040000000700000070306c62616e6700040000000200000049640000020000001f000000040000000300000043485000020000000e0000000400000004000000537461721c00000006000000020000000300000002000000030000000200000002000000020000000300000002000000030000000200000003000000040000000a000000426f6e7573537461747300001c000000060000000200000000000000020000000000000002000000000000000200000000000000020000000000000002000000000000000400000009000000456e6368616e7465640000001c0000000000000004000000090000004162696c69746965730000001b00000002000000040000000100000030000000040000000300000032343700040000000100000031000000040000000200000038380000040000000500000053746174730000001b0000000600000004000000020000006561000002000000080000000400000002000000706100000200000007000000040000000200000068700000020000000e000000040000000300000073706400020000000900000004000000020000007064000002000000"
# HEX += "0900000004000000020000006564000002000000090000001c000000010000001b0000000a00000004000000020000004964000004000000020000003332000004000000050000004c6576656c000000020000001400000004000000030000004348500002000000580000000400000004000000537461721c00000006000000020000000200000002000000030000000200000001000000020000000200000002000000030000000200000001000000040000000a000000426f6e7573537461747300001c000000060000000200000000000000020000000000000002000000000000000200000000000000020000000000000002000000000000000400000009000000456e6368616e7465640000001c000000000000000400000004000000486172640200000003000000040000000400000057696c64040000000000000004000000090000004162696c69746965730000001b00000008000000040000000100000030000000040000000300000032353100040000000100000031000000040000000200000037380000040000000200000031300000040000000300000034343000040000000200000031330000040000000200000038310000040000000200000031360000040000000300000031383200040000000200000031390000040000000300000032333400040000000100000034000000040000000300000031373400040000000100000037000000040000000100000033000000040000000500000053746174730000001b00000006000000040000000200000065610000020000002d0000000400000002000000706100000200000032000000040000000200000068700000020000005800000004000000030000007370640002000000260000000400000002000000706400000200000032000000040000000200000065640000020000001a0000001b000000030000000400000007000000506c6179657273001b00000002000000040000000700000070306c62616e67001b0000000100000004000000050000004c6576656c00000002000000b6000000040000000400000057696c641b00000000000000040000000a000000426174746c655479706500000400000005000000537061776e00000004000000080000004d657461646174611b00000002000000040000000a000000436c69656e745369646500001b00000001000000040000000a0000004261636b67726f756e640000020000000600000004000000080000004c6f636174696f6e1c00000002000000040000000b0000004d6f756e742047656d6d61000200000001000000"

# parsedobject = parsegodot(HEX)
# print(json.dumps(parsedobject,indent=2))
